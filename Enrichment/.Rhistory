length(pValue.elim)
length(pValue.cls)
gstat
head(gstat)
?termStat
sel.go <- names(pValue.cls)[pValue.elim < pValue.cls]
cbind(termStat(sampleGOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
pValue.elim[sel.go]
sel.go
pValue.elim < pValue.cls
sel.go <- names(pValue.cls)[pValue.elim <= pValue.cls]
sel.go
cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
sel.go.stat <- sel.go.stat[which(elim < 0.05)
]
sel.go.stat <- cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
sel.go.stat <- sel.go.stat[which(elim < 0.05)]
sel.go.stat <- sel.go.stat(which(elim < 0.05))
sel.go.stat <- cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
sel.go.stat <- sel.go.stat[which(elim < 0.05)]
sel.go.stat <- which(sel.go.stat$elim < 0.05)]
sel.go.stat <- which(sel.go.stat$elim < 0.05)
sel.go.stat <- sel.go.stat[which(sel.go.stat$elim < 0.05)]
sel.go.stat <- sel.go.stat[which(sel.go.stat$elim < 0.05),]
sel.go.stat <- sel.go.stat[, which(sel.go.stat$elim < 0.05)]
sel.go.stat <- sel.go.stat[[which(sel.go.stat$elim < 0.05)]]
which(sel.go.stat$elim < 0.05)
sel.go.stat <- which(sel.go.stat$elim < 0.05)
sel.go.stat <- cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
sel.go.stat <- which(sel.go.stat$elim < 0.05)
sel.go.stat <- cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
which(sel.go.stat$elim < 0.05)
sel.go.stat[1513]
sel.go.stat[1513,]
sel.go.stat <- cbind(termStat(GOdata, sel.go), elim = pValue.elim[sel.go], classic = pValue.cls[sel.go])
sel.go.stat <- sel.go.stat[which(sel.go.stat$elim < 0.05),]
View(sel.go.stat)
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 50)
allRes.weit
# Do not take the GO hierarchy into account
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 300)
allRes.cls
allRes.elim
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
pValue.weit
sel.go <- names(pValue.weit)[0.01 < pValue.weit]
length(sel.go)
sel.go
sel.go <- names(pValue.weit)[0.01 > pValue.weit]
sel.go <- names(pValue.weit)[0.05 > pValue.weit]
sel.go <- names(pValue.weit)[0.01 > pValue.weit]
sel.go.stat <- cbind(termStat(GOdata, sel.go), weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
allRes.weit
View(allRes.cls)
sel.fun <- allRes.weit[which(2,allRes.weit$classicFisher < 0.01)]
sel.fun <- allRes.weit[which(, allRes.weit$classicFisher < 0.01)]
sel.fun <- allRes.weit[, which(allRes.weit$classicFisher < 0.01)]
sel.fun <- allRes.weit[which(allRes.weit$classicFisher < 0.01),]
View(sel.fun)
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich.csv", row.names = F, quote = F)
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.fun <- allRes.weit[which(allRes.weit$classicFisher < 0.05),]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich.csv", row.names = F, quote = F)
sel.fun <- allRes.weit[which(allRes.weit$classicFisher < 0.05),]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
sel.fun <- allRes.weit[which(allRes.weit$classicFisher < 0.01),]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
score(resultFisher.weit)
?GenTable
sel.fun <- allRes.weit[which(allRes.weit$GO.ID == sel.go),]
sel.go
View(sel.fun)
allRes.weit[which(allRes.weit$GO.ID == sel.go),]
allRes.weit$GO.ID
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 50)
allRes.weit
allRes.weit[which(allRes.weit$GO.ID == sel.go),]
allRes.weit$GO.ID
resultFisher.weit
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 300)
allRes.weit
sel.fun <- allRes.weit[which(allRes.weit$GO.ID == sel.go),]
allRes.weit$GO.ID
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.go
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher")
allRes.weit
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 300)
sel.go
resultFisher.weit
View(resultFisher.wet)
resultFisher.wet
resultFisher.wet@description
resultFisher.wet
resultFisher.wet@geneData
resultFisher.wet@score
resultFisher.wet@description
resultFisher.wet
?runTest
resultFisher.wet@testName
resultFisher.wet@algorithm
resultFisher.wet@geneData
?GenTable
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
# import the final gene list from the three way intersection
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_way_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
View(resultFisher.weit)
resultFisher.weit
lenght(resultFisher.weit)
lengtht(resultFisher.weit)
length(resultFisher.weit)
length(resultFisher.weit@score)
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = length(resultFisher.weit@score))
allRes.weit
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[which(allRes.weit$GO.ID == sel.go),]
sel.go
allRes.weit$GO.ID
allRes.weit$GO.ID
allRes.weit
allRes.weit[allRes.weit %in% allRes.weit$GO.ID & sel.go]
allRes.weit[allRes.weit %in% allRes.weit$GO.ID & as.factor(sel.go)]
as.factor(sel.go)
gol.go.table <- data.frame(sel.go)
gol.go.table <- data.frame(go = sel.go)
View(gol.go.table)
View(gol.go.table)
allRes.weit[GO.ID %in% gol.go.table$go]
allRes.weit[GO.ID %in% gol.go.table$go]
allRes.weit[allRes.weit$GO.ID %in% gol.go.table$go]
sel.fun <- allRes.weit[which(allRes.weit$GO.ID == gol.go.table$go),]
View(sel.fun)
sol.go.table <- data.frame(go = sel.go)
allRes.weit$GO.ID
allRes.weit[GO.ID %in% go.table$go]
data.frame(allRes.weit)[GO.ID %in% go.table$go]
allRes.weit$GO.ID == go.table$go
go.table <- data.frame(go = sel.go)
allRes.weit$GO.ID == go.table$go
class(sel.go)
as.vector(sel.go)
allRes.weit[GO.ID %in% as.vector(sel.go)]
allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go)]
allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
View(sel.fun)
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
View(sel.go.stat)
sel.go
sel.genes <- genesInTerm(myGOdata, sel.go)
sel.genes <- genesInTerm(GOdata, sel.go)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
print(paste("Term",go,"genes:",genesforterm))
}
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go])
sel.genes <- genesInTerm(GOdata, sel.go)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
print(paste("Term",go,"genes:",genesforterm))
}
sel.genes
sel.go
sel.genes[go]
sel.genes
sel.genes[GO:2000587]
sel.genes[GO:2000587][[1]]
sel.go[i]
sel.go[1]
sel.genes[GO:0002265][[1]]
sel.genes[GO:0002265]
sel.genes["GO:0002265"]
sel.genes["GO:0002265"][[1]]
View(sel.genes)
sel.genes[["GO:0002265"]]
sel.genes[["GO:0007205"]]
sel.genes[["GO:008360"]]
sel.genes["GO:008360"]
sel.genes
sel.genes$`GO:0008360`
class(sel.genes)
test <- data.frame(sel.genes)
test <- as.data.frame(sel.genes)
do.call(rbind.data.frame, sel.genes)
test <- do.call(rbind.data.frame, sel.genes)
View(test)
View(sel.genes)
sel.genes[3]
View(test)
sel.genes[["GO:0008360"]]
test <- sel.genes
test <- df <- data.frame(matrix(unlist(sel.genes), nrow=length(sel.genes), byrow=TRUE))
View(test)
matrix(unlist(sel.genes)
test <- matrix(unlist(sel.genes))
View(test)
test <- data.frame(Reduce(rbind, sel.genes))
View(test)
test <- data.frame(Reduce(rbind, sel.genes))
test <- data.frame(matrix(unlist(sel.genes), nrow=length(sel.genes), byrow=TRUE))
test <- do.call(rbind.data.frame, sel.genes)
View(test)
View(test)
test <- data.frame(sel.genes)
View(sel.genes)
library(dplyr)
my_df <- reduce(sel.genes, bind_rows)
library(purrr)
my_df <- reduce(sel.genes, bind_rows)
print(as.data.frame(do.call(cbind, sel.genes)))
test <- print(as.data.frame(do.call(cbind, sel.genes)))
View(test)
View(test)
test <- print(as.data.frame(do.call(rbind, sel.genes)))
View(test)
sel.genes
sel.genes$values
sel.genes$Calues
sel.genes$Values
sel.genes[]
View(sel.genes)
unname(sel.genes)
unname(sel.genes[])
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=unname(sel.genes))
gene <- data.frame(unname(sel.genes))
gene <- unname(sel.genes)
View(gene)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
print(paste("Term",go,"genes:",genesforterm))
}
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
dat <- print(paste("Term",go,"genes:",genesforterm))
datalist[[i]] <- dat
}
datalist <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
dat <- print(paste("Term",go,"genes:",genesforterm))
datalist[[i]] <- dat
}
View(datalist)
df_total <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(go_term=go, gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
View(df_total)
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
df_total <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(go_term=go, gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
df_total <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(gene_list=genesforterm)
df_total <- rbind(df_total,df)
}
View(datalist)
View(df_total)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=',')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
View(gene_list)
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
View(sel.go.stat)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p001.csv", row.names = F, quote = F)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p001.csv", row.names = F, quote = F)
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
# import the final gene list from the three way intersection
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_way_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
View(gene2go)
View(GOdata)
GOdata@description
GOdata@geneSelectionFun
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = length(resultFisher.weit@score))
allRes.weit
View(allRes.weit)
?GenTable
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
View(allRes.weit)
# Do not take the GO hierarchy into account
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p001.csv", row.names = F, quote = F)
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RAiSD_OmegaPlus_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# among 17834 genes, 9348 genes have Go annotation
# in the 9348 genes, 115 genes are significant
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.weit
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.01]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
View(sel.go.stat)
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
View(sel.go.stat)
View(sel.go.stat)
View(sel.go.stat)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RDOMG_weight_GO_enrich_p005.csv", row.names = F, quote = F)
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_way_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
# among 17834 genes, 9348 genes have Go annotation
# in the 9348 genes, 115 genes are significant
# enrichment tests
# take GO hierarchy into account
resultFisher.weit <- runTest(GOdata, algorithm="weight01", statistic="fisher")
allRes.weit <- GenTable(GOdata, classicFisher = resultFisher.weit, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.weit
# Do not take the GO hierarchy into account
resultFisher.cls <- runTest(GOdata, algorithm="classic", statistic="fisher")
allRes.cls <- GenTable(GOdata, classicFisher = resultFisher.cls, orderBy = "resultFisher", ranksOf = "classicFisher", numChar=1000, topNodes = length(resultFisher.weit@score))
allRes.cls
# Put the results of the two together
pValue.cls <- score(resultFisher.cls)
pValue.weit <- score(resultFisher.weit)[names(pValue.cls)]
sel.go <- names(pValue.weit)[pValue.weit < 0.05]
sel.fun <- allRes.weit[allRes.weit$GO.ID %in% as.vector(sel.go),]
sel.genes <- genesInTerm(GOdata, sel.go)
gene_list <- NULL
for (i in 1:length(sel.go))
{
go <- sel.go[i]
genesforterm <- sel.genes[go][[1]]
genesforterm <- paste(genesforterm, collapse=';')
df <- data.frame(gene_list=genesforterm)
gene_list <- rbind(gene_list,df)
}
sel.go.stat <- cbind(sel.fun, weight = pValue.weit[sel.go], classic = pValue.cls[sel.go], gene=gene_list$gene_list)
write.csv(sel.go.stat, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/WGS_weight_GO_enrich_p005.csv", row.names = F, quote = F)
View(sel.go.stat)
gene2go <- readMappings("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/Nriv_trinotate_BP_GOs", sep = "\t", IDsep = ",")
gene2go[lapply(gene2go,length)==0] <-  NA
geneSel <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/RAiSD_OmegaPlus_intersection.txt", header = F)
geneSel <- geneSel$V1
allGenes <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/Enrichment/all_gene", header = F)
allGenes <- allGenes$V1
geneList <- factor(as.integer(allGenes %in% geneSel))
names(geneList) <- allGenes
str(geneList)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = gene2go)
GOdata
