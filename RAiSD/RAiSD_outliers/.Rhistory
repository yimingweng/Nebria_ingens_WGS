library(qvalue)
library(pcadapt)
library(raster)
library(sf)
library(fasterize)
library(psych)
library(ENMeval)
library(rJava)
library(dismo)
library(maxnet)
# set working directory
setwd("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM")
# import elevation (dem) raster
elev <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_dem/sierra_30s_elev.tif")
# generate the slope and aspect from the elevation (dem) raster
slope <- terrain(elev, opt=c('slope', 'aspect'), unit='degrees')
# import snow water equivalent data
swemay = raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/SWE/May.asc", crs="+proj=longlat +datum=WGS84 +no_defs")
swesep = raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/SWE/Sep.asc", crs="+proj=longlat +datum=WGS84 +no_defs")
# Reproject the Coordinate Reference System (crs)
swemay <- projectRaster(swemay, crs=crs(elev))
swesep <- projectRaster(swesep, crs=crs(elev))
# Resample the swe raster by giving resolution of elev
swemay <- resample(swemay, elev, method='bilinear')
swesep <- resample(swesep, elev, method='bilinear')
# import 19 current environmental factors from Worldclim
# temperature rasters
bio1 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio1_Annual_Mean_Temp.tif")
bio2 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio2_Mean_Diurnal_Temp_Range.tif")
bio3 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio3_Isothermality.tif")
bio4 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio4_Temp_Seasonality.tif")
bio5 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio5_Max_Tempe_Warmest_Mont.tif")
bio6 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio6_Min_Temp_Coldest_Month.tif")
bio7 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio7_Temp_Annual_Range.tif")
bio8 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio8_Mean_Temp_Wettest_Quarter.tif")
bio9 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio9_Mean_Temp_Driest_Quarter.tif")
bio10 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio10_Mean_Temp_Warmest_Quarter.tif")
bio11 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio11_Mean_Temp_Coldest_Quarter.tif")
# Precipitation rasters
bio12 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio12_Annual_Precipitation.tif")
bio13 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio13_Precipitation_Wettest_Month.tif")
bio14 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio14_Precipitation_Driest_Month.tif")
bio15 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio15_Precipitation_Seasonality.tif")
bio16 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio16_Precipitation_Wettest_Quarter.tif")
bio17 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio17_Precipitation_Driest_Quarter.tif")
bio18 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio18_Precipitation_Warmest_Quarter.tif")
bio19 <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/worldclim_current/bio19_Precipitation_Coldest_Quarter.tif")
# import the drainage distance map
drainage <- raster("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_rasters/drainage/drainage.tif")
drainage <- projectRaster(drainage, crs=crs(elev))
drainage <- resample(drainage, elev, method='bilinear')
# stack and crop the rasters
rasStack <- stack(elev, slope, swemay, swesep, bio1, bio2, bio3, bio4, bio5, bio6, bio7, bio8, bio9, bio10, bio11, bio12, bio13, bio14, bio15, bio16, bio17, bio18, bio19, drainage)
x11()
plot(rasStack[[c(1:5, 25)]])
x11()
plot(rasStack[[6:16]])
x11()
plot(rasStack[[17:24]])
# check pairwise collinearity of environmental factors
# To do this, we need to use the occurrence records to extract the values from rasters
Pop <- read.table("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/input_occurance/ingens_occurance2.txt", header=T, sep="\t")
coordinates(Pop) <- ~ lon + lat
rasValue <- raster::extract(rasStack, coordinates(Pop))
env <- as.data.frame(rasValue)
str(env)
# Only take slope and 1000M above region
rasStack <- stack(drainage, slope)
elev1000 <- rasterToPolygons(clump(elev > 1000), dissolve = TRUE)
alpine <- st_as_sf(elev1000)
raster.masked <- mask(x = rasStack, mask = alpine)
rasStack <- crop(x = raster.masked, y = extent(elev))
x11()
plot(rasStack)
# create a check the background (bg) points
# bg should be many enough to fill up the focal area
bg <- randomPoints(slope[[1]], n=10000)
bg <- as.data.frame(bg)
colnames(bg) <- c("lon", "lat")
x11()
plot(slope[[1]], legend=FALSE)
points(bg, pch=20, col='red')
# To evaluate the
bg <- randomPoints(rasStack[[1]], n=10000)
bg <- as.data.frame(bg)
colnames(bg) <- c("lon", "lat")
x11()
plot(slope[[1]], legend=FALSE)
points(bg, pch=20, col='red')
bg <- randomPoints(rasStack[[2]], n=10000)
bg <- as.data.frame(bg)
colnames(bg) <- c("lon", "lat")
x11()
plot(slope[[1]], legend=FALSE)
points(bg, pch=20, col='red')
x11()
plot(rasStack)
bg <- randomPoints(rasStack[[1]], n=10000)
bg <- as.data.frame(bg)
colnames(bg) <- c("lon", "lat")
x11()
plot(rasStack[[1]], legend=FALSE)
points(bg, pch=20, col='red')
# To evaluate the model based on different feature class and RM
# jackknife is recommended if number of occurrence records is < 25
result <- ENMevaluate(coordinates(Pop), rasStack, bg.coords = bg, occ.grp = NULL,
bg.grp = NULL, RMvalues = seq(1, 20, 2),
fc = c("L", "LQ", "H" ,"LQH", "LQHP", "LQHPT"),
categoricals = NULL, n.bg = 10000, method = "block",
algorithm = 'maxent.jar', overlap = FALSE,
bin.output = FALSE, clamp = TRUE, rasterPreds = NULL,
parallel = TRUE, numCores = 4, progbar = TRUE,
updateProgress = FALSE)
# check the best model based on AICc
result@results[which(result@results$delta.AICc==0),]
# check the best model based on AUC
result@results[which((result@results$auc.val.avg == max(result@results$auc.val.avg))),]
aic.opt <- result@models[[11]]
df <- var.importance(aic.opt)
x11()
par(mar=c(15, 4.1, 4.1, 2.1))
pr = dismo::predict(rasStack, result@models[[41]], args="dontdoclamp")
x11()
plot(pr)
points(coordinates(Pop), pch=20, col='black')
pr = dismo::predict(rasStack, result@models[[11]], args="dontdoclamp")
x11()
plot(pr)
points(coordinates(Pop), pch=20, col='black')
# plot the predicted distribution based of best model
pr = dismo::predict(rasStack, result@models[[41]], args="dontdoclamp")
x11()
plot(pr)
points(coordinates(Pop), pch=20, col='black')
writeRaster(pr, "C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_SLiM/Ingens_SDM/output_rasters/Geo_only_slope_aspect_drainage",  format="GTiff", overwrite=T)
?svg
svg()
dev.ogff()
dev.off()
library(ggplot2)
library(tidyr)
require(dplyr)
library(maps)
library(raster)
setwd("C:/Users/wengz/Box/Chapter 3/Genetics/FST/slide_windows")
library(openintro)
setwd("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/RAiSD/RAiSD_outliers")
pop <- list.files(path = "C:/Users/wengz/Dropbox/Data/Nebria_ingens/RAiSD_out", full.names=TRUE)
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
svg(file=paste(population, ".tiff", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour)
dev.off()
}
dev.off()
pop <- list.files(path = "C:/Users/wengz/Dropbox/Data/Nebria_ingens/RAiSD_out", pattern="all_mu_stat$",full.names=TRUE)
pop
setwd("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/RAiSD/RAiSD_outliers")
pop <- list.files(path = "C:/Users/wengz/Dropbox/Data/Nebria_ingens/RAiSD_out", pattern="all_mu_stat$",full.names=TRUE)
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
svg(file=paste(population, ".tiff", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour)
dev.off()
}
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
svg(file=paste(population, ".svg", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour)
dev.off()
}
dev.off()
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
svg(file=paste("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/RAiSD/RAiSD_outliers/", population, ".svg", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour)
dev.off()
}
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
svg(file=paste(population, ".svg", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour)
dev.off()
}
par(mfrow = c(21, 1))
pdf("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/RAiSD/RAiSD_outliers/test.pdf")
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
#svg(file=paste(population, ".svg", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour)
#dev.off()
}
dev.off()
library(robustbase)
library(univOutl)
setwd("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/omegaplus")
omegaplus.out <- read.table("omegaPlus_out_final")
library(openintro)
setwd("C:/Users/wengz/Dropbox/Chapter 3/Nebria_ingens_WGS/RAiSD/RAiSD_outliers")
pop <- list.files(path = "C:/Users/wengz/Dropbox/Data/Nebria_ingens/RAiSD_out", pattern="all_mu_stat$",full.names=TRUE)
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
tiff(file=paste(population, ".tiff", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour, main=population, xlab="position", ylab=expression(mu))
dev.off()
}
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
name <- read.table(text = population, sep = "/", as.is = TRUE)$V8
tiff(file=paste(population, ".tiff", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour, main=population, xlab="position", ylab=expression(mu))
dev.off()
}
q=0.995
for (i in 1:length(pop)){
population <- pop[i]
print(paste("working on", population, " ..."))
name <- read.table(text = population, sep = "/", as.is = TRUE)$V8
tiff(file=paste(population, ".tiff", sep=""))
raisd.out <- read.table(population)
raisd.out$V9 <- c(1:length(raisd.out$V7))
upper_bound <- quantile(raisd.out$V7, q)
raisd.out$Colour[raisd.out$V7>=upper_bound]="red"
raisd.out$Colour[raisd.out$V7<=upper_bound]="black"
plot(raisd.out$V9, raisd.out$V7, pch=20, cex=0.2, col=raisd.out$Colour, main=name, xlab="position", ylab=expression(mu))
dev.off()
}
pdf("all_distribution.pdf")
for (i in 1:length(pop)){
population <- pop[i]
name <- read.table(text = population, sep = "/", as.is = TRUE)$V8
print(paste("working on",population, "..."))
raisd.out <- read.table(population)
upper_bound <- quantile(raisd.out$V7, q)
densityPlot(raisd.out$V7, main=name)
abline(v=upper_bound, col="red")
outliers <- raisd.out[which(raisd.out$V7 > upper_bound),]
#bed <- cbind(outliers$V8, outliers$V1, outliers$V1)
#write.table(bed, file=paste(population, "995quantile.bed", sep=""), quote=F, col.names = F, row.names = F, sep="\t")
}
dev.off()
