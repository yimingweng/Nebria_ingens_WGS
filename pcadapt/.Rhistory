library(qvalue)
library(pcadapt)
# convert the vcf file to bed file
variants <- read.pcadapt("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/lcs_final.bed", type = "bed", type.out = "bed")
library(qvalue)
library(pcadapt)
setwd("C:/Users/PC/Dropbox/Chapter 3/Nebria_ingens_WGS/pcadapt")
# convert the vcf file to bed file
variants <- read.pcadapt("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/lcs_final.bed", type = "bed", type.out = "bed")
# convert the vcf file to bed file
variants <- read.pcadapt("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/lcs_final.bed", type = "bed", type.out = "bed")
# convert the vcf file to bed file
variants <- read.pcadapt("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/lcs_final.bed", type = "bed", type.out = "bed")
# convert the vcf file to bed file
variants <- read.pcadapt("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/lcs_final.bed", type = "bed", type.out = "bed")
setwd("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/")
variants <- read.pcadapt("lcs_final.bed", type = "bed", type.out = "bed")
variants <- read.pcadapt("lcs_final", type = "bed", type.out = "bed")
variants <- read.pcadapt("lcs_final.bed", type = "bed", type.out = "bed")
variants <- read.pcadapt("E:/YiMing/pcadapt/lcs_final.bed", type = "bed", type.out = "bed")
setwd("C:/Users/PC/Dropbox/Chapter 3/Nebria_ingens_WGS/pcadapt")
setwd("C:/Users/PC/Dropbox/Chapter 3/Nebria_ingens_WGS/pcadapt")
# Choosing the number K of Principal Components
# Scree plot:
x <- pcadapt(input = variants, K = 10, min.maf = 0.05 , LD.clumping = list(size = 500, thr = 0.1))
summary(x$loadings)
x11()
plot(x, option = "screeplot")
### detect outliers with different methods
# import and sort the loci position
pos <- read.table("E:/YiMing/pcadapt/lcs_final.bim", header=F, sep="\t")
p <- data.frame(pos=pos$V2,pvalue=x$pvalues)
bonadj <- p.adjust(x$pvalues,method="bonferroni")
alpha <- 0.1
bonadj.p <- data.frame(pos=pos$V2,pvalue=x$pvalues,bonadj=bonadj)
bonadj.outliers <- bonadj.p$pos[which(bonadj.p$bonadj < alpha)]
length(bonadj.outliers)
bonadj.out <- data.frame(pos=bonadj.outliers)
bonadj.out.table <- merge(bonadj.out, bonadj.p, by.x = "pos")
bonadj.out.table$pos <- gsub('Contig_', '', bonadj.out.table$pos)
bonadj.final.table <- data.frame(do.call('rbind', strsplit(as.character(bonadj.out.table$pos),':',fixed=TRUE)), bonadj.out.table$pvalue, bonadj.out.table$bonadj)
colnames(bonadj.final.table) <- c("contig","pos", "pvalue", "adjust")
bonadj.final.table$contig <- as.numeric(bonadj.final.table$contig)
bonadj.final.table$contig <- as.numeric(bonadj.final.table$contig)
bonadj.final.table <- bonadj.final.table[order(bonadj.final.table$contig, bonadj.final.table$pos),]
write.table(bonadj.final.table, "E:/YiMing/pcadapt/bonferroni_outliers.txt", row.names=FALSE, sep="\t", quote = FALSE)
setwd("C:/Users/PC/Dropbox/Chapter 3/Nebria_ingens_WGS/pcadapt")
# convert the vcf file to bed file
# if it's been done, read the bed file
variants <- read.pcadapt("C:/Users/PC/Dropbox/Data/Nebria_ingens/Nebria_ingens_GEA_data/lcs_final.bed", type = "bed", type.out = "bed")
# Choosing the number K of Principal Components (here we I use 10, see result of sNMF)
# Conduct pcadapt analysis, with minor allele threshold to be 0.05 (374*2*0.05= only loci with > 38 alt alleles will be considered)
# the LD thinning parameters are following the default setting (500 window size, r square=0.1)
x <- pcadapt(input = variants, K = 10, min.maf = 0.05 , LD.clumping = list(size = 500, thr = 0.1))
# see how many sites are removed from doing pca
summary(x$loadings) # 1,642,161 sites are removed by maf and LD thining
# Score plot
Pop <- read.table("ingens_lcs_final_list", header = T, sep = "\t")
poplist.sp <- Pop$sp
poplist.names <- Pop$pop
x11()
plot(x, option = "scores", i = 1, j = 2, pop = poplist.sp)
bonadj <- p.adjust(x$pvalues,method="bonferroni")
alpha <- 0.05
bonadj.p <- data.frame(pos=pos$V2,pvalue=x$pvalues,bonadj=bonadj)
bonadj.outliers <- bonadj.p$pos[which(bonadj.p$bonadj < alpha)]
length(bonadj.outliers)
### detect outliers with different methods
# import and sort the loci position
pos <- read.table("E:/YiMing/pcadapt/lcs_final.bim", header=F, sep="\t")
p <- data.frame(pos=pos$V2,pvalue=x$pvalues)
bonadj <- p.adjust(x$pvalues,method="bonferroni")
alpha <- 0.05
bonadj.p <- data.frame(pos=pos$V2,pvalue=x$pvalues,bonadj=bonadj)
bonadj.outliers <- bonadj.p$pos[which(bonadj.p$bonadj < alpha)]
length(bonadj.outliers)
bonadj <- p.adjust(x$pvalues,method="bonferroni")
alpha <- 0.05
bonadj.p <- data.frame(pos=pos$V2,pvalue=x$pvalues,bonadj=bonadj)
bonadj.outliers <- bonadj.p$pos[which(bonadj.p$bonadj < alpha)]
length(bonadj.outliers)
bonadj.out <- data.frame(pos=bonadj.outliers)
bonadj.out.table <- merge(bonadj.out, bonadj.p, by.x = "pos")
bonadj.out.table$pos <- gsub('Contig_', '', bonadj.out.table$pos)
bonadj.final.table <- data.frame(do.call('rbind', strsplit(as.character(bonadj.out.table$pos),':',fixed=TRUE)), bonadj.out.table$pvalue, bonadj.out.table$bonadj)
colnames(bonadj.final.table) <- c("contig","pos", "pvalue", "adjust")
bonadj.final.table$contig <- as.numeric(bonadj.final.table$contig)
bonadj.final.table$contig <- as.numeric(bonadj.final.table$contig)
bonadj.final.table <- bonadj.final.table[order(bonadj.final.table$contig, bonadj.final.table$pos),]
write.table(bonadj.final.table, "bonferroni_outliers.txt", row.names=FALSE, sep="\t", quote = FALSE)
